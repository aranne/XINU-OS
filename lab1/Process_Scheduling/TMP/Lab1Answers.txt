1. What are the advantages and disadvantages of each of the two scheduling policies? 
   Also, give the advantages and disadvantages of the round robin scheduling policy originally 
   implemented in Xinu.

   1. Random scheduling:
   Advantages: 
   (1) Easy to implement.
   (2) When resched, we get a random value. All processes has a probability based on its priority to run, 
       even low priority process has a chance to run, so it avoids starvation problem.
   (3) Response time for low priority process will be shorter than default scheduling policy.
   (4) CPU time is fully used, null process won't run if there's a process in ready queue.
   Disadvantages:
   (1) Low priority process may run before high priority process. This priority inversion may cause high
       priority process waits too long and takes a long time to finish(turnaround time is large). 
   
   2. Linux-Like scheduling:
   Advantages:
   (1) Relatively fair scheduling. In each epoch, every process has a chance to run bases on its goodness,
       So it avoids starvation problem.
   (2) The response time for every process will be small because every process will run in first epoch.
   (3) In each epoch, high goodness process will run earlier, it addresses priority inversion problem.
   (4) A process not running in last epoch will get more goodness in this epoch. The wait time is considered
       into calculation of goodness.
   (5) CPU time is fully used, null process won't run if there's a process in ready queue.

   Disadvantages:
   (1) Every new created process will wait to next epoch to run. If a process needs to get response quickly, 
       it will take a longer time to get a response.
   (2) There's an overhead for OS to compute quantum and goodness values for each process when rescheduled.
   (3) OS needs to check whether an epoch ends or not when rescheduled.

2. Describe when each of the schedulers run the NULL process.

   1. Random scheduling:
   When there's no other ready process, NULL process will be scheduled.
   In my implementation, when there's only NULL process in the ready queue, random value will be -1, 
   so NULL process will be selected to run.

   2. Linux-Like scheduling:
   When there's no other ready process, NULL process will be scheduled.
   In my implementation, OS checks epoch ending and starts a new epoch before it schedules a process. 
   So process with 0 goodness in ready queue will get proper goodness(>0) before OS scheduling.
   When there's only NULL process in the ready queue, it will be selected to run.

3. Assume that there are three processes P1, P2, P3 that will run forever without blocking.
   We want to allocate the following CPU times to each of them: 20% to P1, 30% to P2, and 50% to P3. 
   Which priorities do we need to set to P1, P2, and P3 to accomplish this if we want to use the Random scheduler? 
   Assume that those processes are the only ones running in the machine. 
   Could you give a generalization of your result to n processes? Explain.

   If we use Random scheduler, the probability of choosing a process will be proportional to its priority.
   So if we set process priority as P1 = 20, P2 = 30, P3 = 50, the probability of P1, P2 and P3 to be selected to
   run will be F1 = 20 / (20 + 30 + 50) = 20%, F2 = 30 / (20 + 30 + 50) = 30%, F3 = 50 / (20 + 30 + 50) = 50%.
   So the CPU times allocated to P1, P2 and P3 will be 20%, 30% and 50%.

   If there's n process, and we want to allocate CPU times to them as t1%, t2%, t3%, ..., tn%.
   Suppose that (t1% + t2% + t3% + ... + tn%) = 100%.
   The probability for the ith process to run is ti / (t1 + t2 + ... + tn) = ti%
   So the priority of each process will be t1, t2, t3, ..., tn.